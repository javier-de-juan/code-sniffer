<?xml version="1.0"?>
<ruleset name="UNIR">
    <description>Security reviews with PHPCS.</description>

    <autoload>[COMPOSER_PATH]/vendor/wp-coding-standards/wpcs/WordPress/PHPCSAliases.php</autoload>

    <!-- Treat all files as UTF-8. -->
    <config name="encoding" value="utf-8"/>

    <!-- Exclude the Composer Vendor directory. -->
    <exclude-pattern>/vendor/*</exclude-pattern>

    <!-- Exclude the Node Modules directory. -->
    <exclude-pattern>/node_modules/*</exclude-pattern>

    <!-- Just check php files -->
    <arg name="extensions" value="php"/>

    <!-- Colors! Nice! -->
    <arg name="colors"/>

    <!-- Full report -->
    <arg name="report" value="full"/>

    <!-- File Format -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="indent" value="4"/>
            <property name="tabIndent" value="false"/>
        </properties>
        <type>Warning</type>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent">
        <type>Warning</type>
    </rule>
    <rule ref="PSR2R.PHP.NoShortOpenTag" />

    <!-- NameSpaces -->
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameAfterKeyword" />
    <rule ref="PSR2R.Namespaces.NoInlineFullyQualifiedClassName" />
    <rule ref="PSR2.Namespaces.UseDeclaration"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="PSR2R.Namespaces.UnusedUseStatement"/>

    <!-- Comments -->
    <rule ref="Squiz.Commenting.ClassComment">
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment">
        <type>Warning</type>
    </rule>
    <!-- Prevent fixer conflict for conflicting rules. -->
    <rule ref="Squiz.Commenting.InlineComment">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.BlockComment">
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.Commenting.EmptyCatchComment">
        <type>Warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment">
        <type>Warning</type>
    </rule>

    <!-- Includes -->
    <rule ref="PEAR.Files.IncludingFile">
        <type>Warning</type>
    </rule>

    <!-- Formatting -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
        <type>Warning</type>
    </rule>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.PHP.LowerCaseKeyword">
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.Classes.LowercaseClassKeywords">
        <type>Warning</type>
    </rule>
    <rule ref="Generic.PHP.LowerCaseConstant">
        <type>Warning</type>
    </rule>
    <rule ref="WordPress.WhiteSpace.OperatorSpacing">
        <type>Warning</type>
    </rule>
    <rule ref="PSR2R.WhiteSpace.UnaryOperatorSpacing">
        <type>Warning</type>
    </rule>
    <rule ref="PSR2R.WhiteSpace.ConcatenationSpacing">
        <type>Warning</type>
    </rule>
    <rule ref="PSR2R.PHP.SingleQuote">
        <type>Warning</type>
    </rule>
    <rule ref="Generic.Formatting.SpaceAfterCast">
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.WhiteSpace.CastSpacing">
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName.NotCamelCaps"/>
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>
    <rule ref="PEAR.NamingConventions.ValidClassName"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- Methods -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing">
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords">
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
        <type>Warning</type>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
        <severity>0</severity>
        <type>Warning</type>
    </rule>
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing">
        <type>Warning</type>
    </rule>
    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
        <type>Warning</type>
    </rule>
    <rule ref="PSR2.Methods.FunctionCallSignature.OpeningIndent">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <rule ref="Squiz.Commenting.FunctionComment.InvalidTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <type>Warning</type>
    </rule>

    <!-- Control Structures -->
    <rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
        <type>Warning</type>
    </rule>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>
    <rule ref="PSR2R.ControlStructures.TernarySpacing">
        <type>Warning</type>
    </rule>
    <rule ref="PSR2R.ControlStructures.UnneededElse"/>
    <rule ref="WordPress.PHP.YodaConditions"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEqualOperators"/>


    <!-- Classes -->
    <rule ref="PSR2R.Classes.BraceOnSameLine"/>
    <rule ref="PEAR.NamingConventions.ValidClassName"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes"/>

    <!-- Array -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
    <rule ref="WordPress.Arrays.CommaAfterArrayItem">
        <type>Warning</type>
    </rule>
    <rule ref="WordPress.Arrays.MultipleStatementAlignment"/>
    <rule ref="WordPress.Arrays.ArrayDeclaration"/>

    <!-- Generic -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>

    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>
    <rule ref="Generic.Files.OneClassPerFile"/>
    <rule ref="WordPress.WP.EnqueuedResources"/>
    <rule ref="WordPress.PHP.StrictInArray"/>
    <rule ref="Generic.PHP.Syntax"/>
    <rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
        <type>error</type>
    </rule>
    <rule ref="WordPress.WP.I18n.TranslatorsCommentWrongStyle">
        <type>error</type>
    </rule>
    <rule ref="WordPress.Security.ValidatedSanitizedInput"/>
    <rule ref="WordPress.PHP.DiscourageGoto"/>
    <rule ref="WordPress.PHP.DiscourageGoto.Found">
        <type>error</type>
        <message>The "goto" language construct should not be used.</message>
    </rule>

</ruleset>